apply plugin: "java"
apply plugin: "com.install4j.gradle"
apply plugin: "de.undercouch.download"


import com.install4j.gradle.Install4jTask
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

// Remember to also modify GaiaSkyDesktop#MIN_JAVA_VERSION
JavaVersion minJavaVersion = JavaVersion.VERSION_21
java {
    sourceCompatibility = minJavaVersion
}
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

project.ext.mainClassName = "gaiasky.desktop.GaiaSkyDesktop"
project.ext.workDir = new File("../")
project.ext.assetsDir = new File(project.ext.workDir, "assets")
project.ext.sourceSets = sourceSets
project.ext.tmpDir = new File("/tmp/gaiasky-gradle/")
project.ext.tmpDir.mkdirs()
project.ext.jreArchive = "jre-archive.tar.gz"

interface Injected {
    @Inject FileSystemOperations getFs() 
}

def coreProject = project(':core')

tasks.register('genVersionFile') {
    // Capture values at configuration time
    def buildtime = coreProject.buildtime
    def rev = coreProject.rev
    def tag = coreProject.tag
    def builder = coreProject.builder
    def system = coreProject.system

    outputs.file layout.buildDirectory.file("classes/java/main/version")

    doLast {
        File versionFile = file('build/classes/java/main/version')
        versionFile.delete() // Remove existing
        versionFile.parentFile.mkdirs() // Ensure directory exists

        versionFile.withWriter('UTF-8') { writer ->
            writer.writeLine("buildtime=$buildtime")
            writer.writeLine("build=$rev")
            writer.writeLine("version=$tag")
            writer.writeLine("builder=$builder")
            writer.writeLine("system=$system")
        }
    }
}

// Make compileJava depend on genVersionFile to make sure the version file
// is generated early enough
tasks.named('compileJava') {
    dependsOn genVersionFile
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        main {
            output.resourcesDir = project.assetsDir.absolutePath
        }
    }
    test {
        java {
            srcDirs = ["test"]
        }
    }
}


jar {
    dependsOn genVersionFile
    exclude('**/*.hiero')
    exclude('**/*.svg')
    exclude('**/*.xcf')
}

install4j {
    installDir = file("${System.properties['user.home']}/Programs/install4j11")
}

javadoc {
    destinationDir = file("${layout.buildDirectory.get()}/docs/javadoc")

    options {
        // Sets the HTML title of the generated documentation
        docTitle = "Gaia Sky Javadoc"

        // Sets the header text (appears at the top of each page)
        header = "<strong><a href='https://gaiasky.space'>Gaia Sky</a></strong> | <a href='http://docs.gaiasky.space'>docs</a> | <a href='https://codeberg.org/gaiasky/'>source</a> "
        // Bottom part.
        bottom = "<a href='https://gaiasky.space'>Gaia Sky website</a> | <a href='http://docs.gaiasky.space'>Project documentation</a> | <a href='https://codeberg.org/gaiasky/'>Code repository</a>"

        // Optional: sets the window title (browser tab)
        windowTitle = "Gaia Sky Javadoc"
    }
}

abstract class GaiaSkyRun extends JavaExec {
    public GaiaSkyRun() {
        mainClass = project.mainClassName as String
    }

    public void setup() {
        systemProperties['properties.file'] = ''
        systemProperties['assets.location'] = './assets/'
        systemProperties['org.slf4j.simpleLogger.defaultLogLevel'] = 'warn'
        // logging levels (e.g. REST server warn, info, debug)
        systemProperties['org.slf4j.simpleLogger.showThreadName'] = 'false'

        minHeapSize = "3g"
        maxHeapSize = "6g"
        // Parallel GC
        //jvmArgs = [ '-XX:+UseParNewGC']
        // CMS GC
        //jvmArgs = ['-server', '-XX:+UseConcMarkSweepGC', '-XX:+UseParNewGC', '-XX:MaxGCPauseMillis=5', '-XX:+CMSParallelRemarkEnabled', '-XX:CMSInitiatingOccupancyFraction=60', '-XX:MaxTenuringThreshold=4', '-XX:MaxNewSize=384m', '-XX:NewSize=384m', '-XX:SurvivorRatio=12']
        // Default GC
        //jvmArgs "-XX:+UseShenandoahGC"
        // ZGC
        jvmArgs = [ '-XX:+UseZGC', '-XX:+ZGenerational']
        if (DefaultNativePlatform.currentOperatingSystem.macOsX) {
            // Required to run lwjgl3 java apps on macOS
            jvmArgs += "-XstartOnFirstThread"
        }
        // Verbose GC
        // jvmArgs = ['-verbose:gc']
        classpath = project.ext.sourceSets.main.runtimeClasspath
        classpath += project.files(project.ext.assetsDir)
        standardInput = System.in
        workingDir = project.ext.workDir
    }
}

tasks.register('run', GaiaSkyRun) {
    dependsOn jar
    description = 'Runs Gaia Sky.'
    setup()
}

tasks.register('translationStatus', JavaExec) {
    dependsOn jar
    description = 'Runs the I18n status program, which generates statistics about the current status of the translation files.'
    systemProperties['assets.location'] = './assets/'
    classpath = project.ext.sourceSets.main.runtimeClasspath
    classpath += project.files(project.ext.assetsDir)
    standardInput = System.in
    workingDir = project.ext.workDir
    mainClass = "gaiasky.desktop.util.I18nStatus"
}

tasks.register('runI18nFormatter', JavaExec) {
    dependsOn jar
    description = 'Runs the I18n formatter, which formats the i18n files with missing keys.'
    systemProperties['assets.location'] = './assets/'
    classpath = project.ext.sourceSets.main.runtimeClasspath
    classpath += project.files(project.ext.assetsDir)
    standardInput = System.in
    workingDir = project.ext.workDir
    mainClass = "gaiasky.desktop.util.I18nFormatter"
}

tasks.register('createDistDir') {
    description = 'Creates the dist/ directory.'
    doLast {
        File distDir = new File(project.distDir as String)
        // Prepare output directory
        delete distDir
        mkdir distDir
    }
}

tasks.register('copyToLib') {
    dependsOn createDistDir
    description = 'Copies all classpath files to the dist/lib directory.'
    doLast {
        // Create releases/dist/lib
        File distLib = new File(project.distDir as String, 'lib')
        mkdir distLib
        project.ext.distLib = distLib.getPath()

        // Copy dependencies to dist lib folder
        copy {
            duplicatesStrategy = DuplicatesStrategy.INCLUDE
            from configurations.runtimeClasspath
            into project.distLib
            exclude "**/data"
            exclude "**/assets-bak"
            exclude "**/metainfo"
            exclude "**/core-" + version + ".jar"
            exclude "dummyversion"
        }

        // Remove folders
        delete project.distLib + '/archetypes'
        delete project.distLib + '/conf'
        delete project.distLib + '/data'
        delete project.distLib + '/font'
        delete project.distLib + '/i18n'
        delete project.distLib + '/icon'
        delete project.distLib + '/img'
        delete project.distLib + '/music'
        delete project.distLib + '/mappings'
        delete project.distLib + '/bookmarks'
        delete project.distLib + '/rest-static'
        delete project.distLib + '/scripts'
        delete project.distLib + '/shader'
        delete project.distLib + '/shaders'
        delete project.distLib + '/skins'
        delete project.distLib + '/text'
        delete project.distLib + '/cert'
    }
}

tasks.register('gaiaskyJar') {
    dependsOn genVersionFile, jar, copyToLib
    description = 'Creates the Gaia Sky jar file, gaiasky-core.jar.'
    doLast {
        copy {
            from "$baseDir/core/build/libs/core-" + version + ".jar"
            into "$distLib/"
        }
        file("$distLib/core-" + version + ".jar").renameTo(file("$distLib/gaiasky-core.jar"))
    }
}

tasks.register('genReleaseNotes', Exec) {
    description = 'Generates the release notes of Gaia Sky.'
    println("generate-releasenotes $tag $distDir/releasenotes.txt")
    workingDir "$baseDir/core/scripts/release/"
    commandLine "/bin/bash", "generate-releasenotes", "$tag", "$distDir/releasenotes.txt"
}

// Task to check Java version
tasks.register('javaVersionCheck') {
    description = "Check that the current Java version (in \$GS_JAVA_VERSION_CHECK) is compatible with the configured minimum java version."
    doLast {
        String vsc = "${System.env.GS_JAVA_VERSION_CHECK}"
        boolean javaVersionOk = JavaVersion.current().isCompatibleWith(minJavaVersion)

        if (vsc.equalsIgnoreCase("false")) {
            if (!javaVersionOk) {
                println("WARNING: Gaia Sky must be built with Java $minJavaVersion or compatible, you are using ${JavaVersion.current()}")
            }
        } else if (!javaVersionOk) {
            print("FAILURE: Do 'export GS_JAVA_VERSION_CHECK=false' to skip this check")
            throw new GradleException("Gaia Sky must be built with Java $minJavaVersion or compatible, you are using ${JavaVersion.current()}")
        }

        if (javaVersionOk) {
            println("OK: Building with Java ${JavaVersion.current()}")
        }
    }
}

// Copy tasks
tasks.register('copyConfig', Copy) {
    description = 'Copy configuration files to distribution directory.'
    from "$baseDir/assets/conf"
    into "$distDir/conf"
}

tasks.register('copyMetainfo', Copy) {
    description = 'Copy metainfo files to distribution directory.'
    from "$baseDir/assets/metainfo"
    into "$distDir"
}

tasks.register('copyI18n', Copy) {
    description = 'Copy internationalization files to distribution directory.'
    from "$baseDir/assets/i18n"
    into "$distDir/i18n"
}

tasks.register('copyMappings', Copy) {
    description = 'Copy input mappings to distribution directory.'
    from "../assets/mappings"
    into "$distDir/mappings"
}

tasks.register('copyBookmarks', Copy) {
    description = 'Copy bookmarks files to distribution directory.'
    from "../assets/bookmarks"
    into "$distDir/bookmarks"
}

tasks.register('copyRestStatic', Copy) {
    description = 'Copy REST API static files to distribution directory.'
    from "../assets/rest-static"
    into "$distDir/rest-static"
}

tasks.register('copyScripts', Copy) {
    description = 'Copy script files to distribution directory.'
    from "$baseDir/assets/scripts"
    into "$distDir/scripts"
}

tasks.register('copyOptFlowCam', Copy) {
    description = 'Copy OptFlowCam scripts to distribution directory.'
    from "$baseDir/core/scripts/optflowcam"
    into "$distDir/extra/optflowcam"
}

tasks.register('copyExecutables', Copy) {
    description = 'Copy executable files to distribution directory.'
    from "exe"
    into "$distDir"
    exclude "octreegen", ".idea"

    doFirst {
        println("distDir=$distDir")
        println("Copying gaiasky from: ${file('exe/gaiasky').absolutePath}")
        println("Target: ${file("$distDir/gaiasky").absolutePath}")
    }
}

tasks.register('copyRootFiles', Copy) {
    description = 'Copy root-level files (README, LICENSE, etc.) and icons to distribution directory.'
    from "$baseDir"
    include "README.md", "VR.md", "LICENSE", "AUTHORS"
    into "$distDir"

    from "$baseDir/assets/icon"
    include "gs_round_256.png", "gs_icon.ico", "gs_icon.svg", "gsvr_round_256.png", "gsvr_icon.ico"
    into "$distDir"
}

// Platform-specific tasks
tasks.register('makeExecutable', Exec) {
    description = 'Make the main executable file executable on Unix-like systems (Linux/macOS).'
    // This task depends on ALL copy tasks
    dependsOn copyConfig, copyMetainfo, copyI18n, copyMappings, copyBookmarks,
            copyRestStatic, copyScripts, copyOptFlowCam, copyExecutables, copyRootFiles

    commandLine 'chmod', 'ugo+x', "$distDir/gaiasky"

    doFirst {
        def gaiaskyExe = file("$distDir/gaiasky")
        if (!gaiaskyExe.exists()) {
            throw new GradleException("Executable $gaiaskyExe does not exist!")
        }
        println("Making $gaiaskyExe executable")
    }
}

tasks.register('generateManPage', Exec) {
    description = 'Generate man page documentation using help2man (Linux only).'
    dependsOn makeExecutable

    def gaiaskyExe = file("$distDir/gaiasky")
    def manPage = file("$distDir/gaiasky.6")

    commandLine 'help2man',
            '--no-discard-stderr',
            '-N',
            '--section=6',
            "--include=$baseDir/core/man/gaiasky.h2m",
            "--output=$manPage",
            gaiaskyExe.absolutePath

    doFirst {
        println("Generating man page: $manPage")
        if (!gaiaskyExe.exists()) {
            throw new GradleException("Executable $gaiaskyExe does not exist!")
        }
        if (!gaiaskyExe.canExecute()) {
            throw new GradleException("Executable $gaiaskyExe is not executable!")
        }
    }
}

tasks.register('gzipManPage', Exec) {
    description = 'Compress the generated man page using gzip (Linux only).'
    dependsOn generateManPage

    def manPage = file("$distDir/gaiasky.6")
    def compressedManPage = file("$distDir/gaiasky.6.gz")

    commandLine 'gzip', '-f', "$manPage"

    doFirst {
        println("Compressing man page: $compressedManPage")
        if (!manPage.exists()) {
            throw new GradleException("Man page $manPage does not exist!")
        }
    }
}

// Distribution creation task
tasks.register('dist') {
    dependsOn javaVersionCheck
    description = 'Builds Gaia Sky and creates an executable distribution.'

    if (!DefaultNativePlatform.currentOperatingSystem.windows) {
        dependsOn makeExecutable
        if (DefaultNativePlatform.currentOperatingSystem.linux) {
            dependsOn gzipManPage
        }
    } else {
        // On Windows, just depend on all copy tasks
        dependsOn copyConfig, copyMetainfo, copyI18n, copyMappings, copyBookmarks,
                copyRestStatic, copyScripts, copyOptFlowCam, copyExecutables, copyRootFiles
    }
}

tasks.register('createTar') {
    dependsOn dist
    description = 'Builds Gaia Sky and creates a tar.gz file with it.'
    doLast {
        File packageDir = new File(project.packageDir)

        delete packageDir
        mkdir packageDir

        ant.tar(destfile: "$packageDir/" + project.distName + ".tar.gz", compression: 'gzip', longfile: 'gnu') {
            tarfileset(dir: "$releasesDir") {
                include(name: "$distName/**")
                exclude(name: "$distName/AppRun")
                exclude(name: "$distName/gaiasky-appimage.desktop")
            }
            tarfileset(dir: "$releasesDir", filemode: '755') {
                include(name: "$distName/gaiasky")
            }
        }

        // Checksums
        File tarFile = new File("$packageDir/" + project.distName + ".tar.gz")
        ant.checksum(file: tarFile, algorithm: "md5", todir: "$packageDir/")
        ant.checksum(file: tarFile, algorithm: "sha-256", todir: "$packageDir/")
    }
}

tasks.register('downloadJRE', Download) {
    description = 'Downloads the JRE, needed to include in the package files.'
    src "https://github.com/adoptium/temurin24-binaries/releases/download/jdk-24.0.1%2B9/OpenJDK24U-jdk_x64_linux_hotspot_24.0.1_9.tar.gz"
    dest new File("$tmpDir", "$jreArchive")
    onlyIfModified true
    overwrite true
}
tasks.register('downloadAndExtractJRE') {
    dependsOn downloadJRE
    description = 'Downloads and extracts the JRE, needed to include in the package files.'
    doLast {
        File jreArchivePath = new File("$tmpDir", "$jreArchive")
        // Delete pre-existing jre
        project.tmpDir.eachFile(groovy.io.FileType.DIRECTORIES) { dir ->
            delete "$dir"
        }
        // Extract
        copy {
            from tarTree(resources.gzip(jreArchivePath))
            into project.tmpDir
        }

        // Delete package
        delete "$jreArchivePath"

        // Set location
        String[] tmpfiles = project.tmpDir.listFiles()
        project.ext.jreDir = tmpfiles[0]
    }
}

tasks.register('createAppImage') {
    dependsOn createTar, downloadAndExtractJRE
    description = 'Creates the AppImage package for Gaia Sky.'
    doLast {
        String gsId = "gaiasky"
        String appimgDir = "$packageDir" + "/" + "$gsId" + ".AppDir"

        delete "$appimgDir"
        mkdir "$appimgDir"

        // Copy all from dist to AppImage
        copy {
            from "$distDir"
            into "$appimgDir"
            exclude "**/*-natives-macos.jar"
            exclude "**/*-natives-macos-arm64.jar"
            exclude "**/*-natives-windows.jar"
            exclude "**/*-natives-windows-x86.jar"
        }

        // Package JRE
        println("Packaging JRE $jreDir into AppImage")
        copy {
            from "$jreDir"
            into "$appimgDir/usr"
        }

        // Metadata
        File usrmeta = new File("$appimgDir", "usr/share/metainfo/")
        usrmeta.mkdirs()
        copy {
            from file("$appimgDir/" + "$gsId" + ".appdata.xml")
            into usrmeta
        }

        // Set up AppRun executable, remove unneeded files
        delete "$appimgDir/gaiasky", "$appimgDir/gaiasky.cmd"
        delete "$appimgDir/gs_icon.ico", "$appimgDir/gs_icon.svg"
        delete "$appimgDir/gaiasky.desktop"
        delete "$appimgDir/" + "$gsId" + ".appdata.xml"
        file("$appimgDir/gaiasky-appimage.desktop").renameTo(file("$appimgDir/gaiasky.desktop"))

        String appImgFilename = "$gsId" + "_" + "$tagRev" + "_x86_64.appimage"
        // Generate AppImage
        def pb = new ProcessBuilder("appimagetool", "-n", "$appimgDir", "$packageDir/$appImgFilename")
        pb.environment()["ARCH"] = "x86_64"   // set environment variable
        pb.inheritIO()                        // inherit stdout/stderr so you see output
        def process = pb.start()
        def exitCode = process.waitFor()
        if (exitCode != 0) {
            throw new GradleException("appimagetool failed with exit code $exitCode")
        }

        // Checksums
        File appImgFile = new File("$packageDir/$appImgFilename")
        ant.checksum(file: appImgFile, algorithm: "md5", todir: "$packageDir/")
        ant.checksum(file: appImgFile, algorithm: "sha-256", todir: "$packageDir/")
    }
}

tasks.register('createArch') {
    dependsOn createTar, genReleaseNotes
    description = 'Creates the Arch Linux AUR files for Gaia Sky.'
    doLast {
        File archDir = new File(project.packageDir + "/arch/")
        mkdir archDir
        copy {
            from "installerscripts/arch"
            into "$packageDir/arch"
        }
        copy {
            from "$distDir"
            into "$packageDir/arch/"
            include "releasenotes.txt"
        }

        String md5Tar = new File("$packageDir/" + project.distName + ".tar.gz.md5").text
        md5Tar = md5Tar.replace("\n", "").replace("\r", "");

        String sha256Tar = new File("$packageDir/" + project.distName + ".tar.gz.sha-256").text
        sha256Tar = sha256Tar.replace("\n", "").replace("\r", "");

        def obj = getVersionRevision(tagRev)
        String tagVersion = obj[0]
        String tagRevision = obj[1]

        ant.replace(file: "$packageDir/arch/PKGBUILD", token: '@version.revision@', value: "$tagRev")
        ant.replace(file: "$packageDir/arch/PKGBUILD", token: '@version@', value: "$tagVersion")
        ant.replace(file: "$packageDir/arch/PKGBUILD", token: '@revision@', value: "$tagRevision")
        ant.replace(file: "$packageDir/arch/PKGBUILD", token: '@md5checksum@', value: md5Tar)
        ant.replace(file: "$packageDir/arch/PKGBUILD", token: '@sha256checksum@', value: sha256Tar)

        // Run makepkg to create .SRCINFO
        //exec {
        //    workingDir "$packageDir/arch/"
        //    executable "makepkg"
        //    args "--printsrcinfo",">",".SRCINFO"
        //}
    }
}

tasks.register('createDebian') {
    dependsOn createTar, genReleaseNotes
    description = 'Creates the Debian package for Gaia Sky.'
    doLast {
        // DEBIAN directory
        File debDebianDir = new File(project.packageDir + "/debian")
        mkdir debDebianDir

        copy {
            from "installerscripts/debian"
            into "$packageDir/debian"
        }

        // Read releasenotes.txt
        // Take item lines and use '*' instead of '-'
        def notesList = new File("$distDir/releasenotes.txt").text.readLines()
        String notesStr = ""
        for (line in notesList) {
            def l = line.strip()
            if (l.startsWith("-")) {
                notesStr += l.replace('- ', ' * ')
                notesStr += '\n'
            }
        }

        def obj = getVersionRevision(tagRev)
        String tagVersion = obj[0]
        String tagRevision = obj[1]

        ant.replace(file: "$packageDir/debian/changelog", token: '@version@', value: "$tagVersion-$tagRevision")
        ant.replace(file: "$packageDir/debian/changelog", token: '@changelog@', value: "$notesStr")
        ant.replace(file: "$packageDir/debian/changelog", token: '@date@', value: "${buildTime()}")

        // Copy README.md and gaiasky.6.gz, uncompress.
        copy {
            from "$distDir/README.md"
            into "$packageDir/debian/"
        }
        copy {
            from "$distDir/gaiasky.6.gz"
            into "$packageDir/debian/"
        }

        ["gunzip", "$packageDir/debian/gaiasky.6.gz"].execute().waitFor()

    }
}


static def buildTime() {
    return new Date()
}

static def getVersionRevision(String tagRev) {
    String tagVersion = tagRev.substring(0, tagRev.lastIndexOf("."))
    String tagRevision = "1"
    if (tagVersion.contains("-")) {
        String v = tagVersion
        tagVersion = tagVersion.substring(0, tagVersion.lastIndexOf("-"))
        tagRevision = v.substring(v.lastIndexOf("-") + 1)
    }
    return [tagVersion, tagRevision]
}

tasks.register('prepareInstall4jScript') {
    dependsOn createTar
    description = 'Prepares the install4j script by performing some substitutions, and copies it to the releases directory.'
    doLast {
        copy {
            from "installerscripts/template.install4j"
            into "$packageDir"
        }
        file("$packageDir/template.install4j").renameTo(file("$packageDir/" + project.distName + ".install4j"))

        project.ext.releaseFolder = "$baseDir/releases/$distName"

        ant.replace(file: "$packageDir/" + project.distName + ".install4j", token: '@gs-release-folder@', value: "$distDir")
        ant.replace(file: "$packageDir/" + project.distName + ".install4j", token: '@gs-git-folder@', value: "$baseDir")
        ant.replace(file: "$packageDir/" + project.distName + ".install4j", token: '@version-tag@', value: "$tagRev")
    }
}

tasks.register('install4jMedia', Install4jTask) {
    dependsOn prepareInstall4jScript
    description = 'Runs the install4j process to create the media packages.'

    if (project.hasProperty("winKeystorePassword")) {
        winKeystorePassword = project.ext.winKeystorePassword
    } else {
        if (gradle.startParameter.taskNames.contains("core:pack")) {
            throw new GradleException("Please specify the kesytore password for signing Windows packages:\ngradlew core:pack -PwinKeystorePassword=yourpass")
        }
    }

    projectFile = file("$packageDir/" + project.distName + ".install4j")
    variables = [majorVersion: project.tag, build: project.rev]
    release = project.tag

    doLast {
        println("Install4j script location:")
        println("$packageDir/" + project.distName + ".install4j")
    }
}

tasks.register('genGPGSignatures', Exec) {
    dependsOn install4jMedia
    description = 'Generate the GPG signature files for all packages.'
    println("Generating GPG signature files: $packageDir")
    workingDir "$baseDir/core/scripts/release/"
    commandLine "/bin/bash", "sign-packages.sh", "$packageDir"
}

tasks.register('pack') {
    dependsOn genGPGSignatures, createAppImage, createArch, createDebian
    description = 'Generate a full release of Gaia Sky, with all the media files for Linux, Windows and macOS.'
    doLast {
        println("Appending md5 checksum of " + project.distName + ".tar.gz and gaiasky_" + "$tagRev" + "_x86_64.appimage to md5sums file")
        File md5File = file("$packageDir/" + 'md5sums')
        if (md5File.exists()) {
            // Tar
            String md5Tar = file("$packageDir/" + project.distName + ".tar.gz.md5").text
            md5Tar = md5Tar.replace("\n", "").replace("\r", "");

            // Appimage
            String md5AppImg = file("$packageDir/gaiasky_" + "$tagRev" + "_x86_64.appimage.md5").text
            md5AppImg = md5AppImg.replace("\n", "").replace("\r", "");

            md5File.text = file("$packageDir/" + 'md5sums').text + md5Tar + " *" + project.distName + ".tar.gz\n" + md5AppImg + " *gaiasky_" + "$tagRev" + "_x86_64.appimage\n"
            println("Removing files " + project.distName + ".tar.gz.md5 and gaiasky_" + "$tagRev" + "_x86_64.appimage.md5")
            file("$packageDir/" + project.distName + ".tar.gz.md5").delete()
            file("$packageDir/gaiasky_" + "$tagRev" + "_x86_64.appimage.md5").delete()
        } else {
            println("md5 file not found: " + md5File)
        }

        println("Appending sha256 checksum of " + project.distName + ".tar.gz to sha256sums file")
        File sha256File = file("$packageDir/" + 'sha256sums')
        if (sha256File.exists()) {
            // Tar
            String sha256Tar = file("$packageDir/" + project.distName + ".tar.gz.sha-256").text
            sha256Tar = sha256Tar.replace("\n", "").replace("\r", "");

            // Appimage
            String sha256AppImg = file("$packageDir/gaiasky_" + "$tagRev" + "_x86_64.appimage.sha-256").text
            sha256AppImg = sha256AppImg.replace("\n", "").replace("\r", "");

            sha256File.text = file("$packageDir/" + 'sha256sums').text + sha256Tar + " *" + project.distName + ".tar.gz\n" + sha256AppImg + " *gaiasky_" + "$tagRev" + "_x86_64.appimage\n"
            println("Removing files " + project.distName + ".tar.gz.sha-256 and gaiasky_" + "$tagRev" + "_x86_64.appimage.sha-256")
            file("$packageDir/" + project.distName + ".tar.gz.sha-256").delete()
            file("$packageDir/gaiasky_" + "$tagRev" + "_x86_64.appimage.sha-256").delete()
        } else {
            println("sha256 file not found: " + sha256File)
        }

    }
}

tasks.named('test', Test) {
    useJUnit()

    maxHeapSize = '1G'

    testLogging {
        events "passed", "skipped", "failed", "standard_out", "standard_error"
        showExceptions = true
        showCauses = true
        showStackTraces = true
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

eclipse {
    project {
        name = appName.toLowerCase() + "-core"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/assets'
    }
}
