{
  "components": {
    "Base": {
      "description": "Defines basic attributes common to all objects.",
      "id": {
        "description": "The ID of the object, typically set automatically by Gaia Sky.",
        "unit": "Long"
      },
      "name": {
        "description": "A single object name, used to identify the object and as a label text, if any. If the object already has names, this attribute overrides the first one in the name list. The first name in the list is also used as the i18n key for translations.",
        "unit": "String"
      },
      "names": {
        "description": "A list of names, used to identify the object. It overrides the full name list. The first name in the list is used as a label text, and as a i18n key.",
        "unit": "String[]"
      },
      "altName": {
        "description": "Adds a new name to the name list of this object, at the end.",
        "unit": "String",
        "aliases": [
          "altname"
        ]
      },
      "opacity": {
        "description": "Static opacity value. Typically, this gets overwritten internally in the update process.",
        "unit": "Double"
      },
      "componentType": {
        "description": "The content type string (or list) for this object. Content types control the visibility of objects. Examples of content types are 'Planets', 'Asteroids', 'Stars', 'Labels', etc.",
        "unit": "String | String[]",
        "aliases": [
          "ct",
          "componentTypes"
        ]
      }
    },
    "Body": {
      "description": "Defines physical body attributes common to all objects.",
      "position": {
        "description": "The position of the object. This is the position at epoch if the object has a proper motion, or just a static position. Given in the internal reference system and in internal units by default (see aliases for other units).",
        "unit": "Double[3]",
        "aliases": [
          "pos",
          "positionKm",
          "posKm",
          "positionPc",
          "posPc"
        ]
      },
      "size": {
        "description": "The diameter of the entity (in some archetypes this is the radius). The default attribute uses internal units (see aliases for other units).",
        "unit": "Double",
        "aliases": [
          "sizeKm",
          "sizePc",
          "sizepc",
          "sizeM",
          "sizeAU",
          "diameter",
          "diameterKm",
          "diameterPc"
        ]
      },
      "cameraCollision": {
        "description": "Enable or disable camera collision with this object's bounding sphere. This means that the camera is not permitted to enter this object's radius.",
        "unit": "Boolean"
      },
      "radius": {
        "description": "The half-size. See size attribute.",
        "unit": "Double",
        "aliases": [
          "radiusKm",
          "radiusPc"
        ]
      },
      "color": {
        "description": "The color of the entity, as a RGBA quartet. Used as the general color of the entity. The last value in the list, alpha, also acts as a transparency value. The color is also applied to the object label unless 'labelColor' is specified.",
        "unit": "Double[4]"
      },
      "labelColor": {
        "description": "The color of the label of this entity. If set, the label of this entity uses this color. Otherwise, it uses the global entity color.",
        "unit": "Double[4]",
        "aliases": [
          "labelcolor"
        ]
      }
    },
    "GraphNode": {
      "description": "Defines attributes pertaining to the scene graph hierarchy.",
      "parent": {
        "description": "Name of the parent entity in the scene graph. Positions for every object are typically relative to the position of the parent. In some cases, the orientation of the parent is also contemplated.",
        "unit": "String"
      }
    },
    "Coordinates": {
      "description": "Defines attributes that provide coordinates and positions to objects.",
      "coordinatesProvider": {
        "description": "The coordinates provider object for this object. The coordinates provider computes the position of the object for each time. This is an object containing, at least, the full reference to a Java class that implements ``IBodyCoordinates`` in the \"impl\" attribute. Examples are ``gaiasky.util.coord.StaticCoordinates`` or ``gaiasky.util.coord.OrbitLintCoordinates``. See :ref:`coordinate-providers` for more information.",
        "unit": "Map",
        "aliases": [
          "coordinates"
        ]
      }
    },
    "Orientation": {
      "description": "Defines the orientation model of objects. Can be defined as a rigid rotation (given parameters like rotation period, axial tilt, etc.) or via quaternion-based orientations.",
      "rotation": {
        "description": "The rotation object for this object. This attribute describes a rigid body rotation. This is given in the form of a map with the attributes ``angularVelocity``, ``period``, ``axialtilt``, ``inclination``, ``ascendingNode`` and ``meridianAngle``. See :ref:`rotation` for more information.",
        "unit": "Map",
        "aliases": [
          "rigidRotation"
        ]
      },
      "orientationProvider": {
        "description": "Provider class for the quaternion orientations.",
        "unit": "String",
        "aliases": [
          "provider:HeliotropicSatellite",
          "attitudeProvider"
        ]
      },
      "orientationSource": {
        "description": "Location of the data file(s), necessary to initialize the quaternion orientation provider.",
        "unit": "String",
        "aliases": [
          "attitudeLocation"
        ]
      }
    },
    "Celestial": {
      "description": "Defines attributes common to all celestial objects (stars, planets, moons, etc.).",
      "wikiName": {
        "description": "The name to look up this object in the wikipedia, if any. If this is set, a '+ info' button appears in the focus info interface when this object is the focus, enabling the user to pull information on the object directly from Gaia Sky and display it in a window.",
        "unit": "String",
        "aliases": [
          "wikiname"
        ]
      },
      "colorBV": {
        "description": "The color index B-V of this object. This is only ever used in single particles/stars, and when no 'color' attribute has been specified. If that is the case, we convert the B-V index into an RGB color and use it as the object's global color.",
        "unit": "Double",
        "aliases": [
          "colorbv",
          "colorBv",
          "colorIndex"
        ]
      }
    },
    "Magnitude": {
      "description": "Defines magnitude attributes, both apparent and absolute.",
      "appMag": {
        "description": "The apparent magnitude. If it is not given, it is computed automatically from the absolute magnitude (if present) and the distance.",
        "unit": "Double",
        "aliases": [
          "appmag",
          "apparentMagnitude"
        ]
      },
      "absMag": {
        "description": "The absolute magnitude. If it is not given, it is computed automatically from the apparent magnitude (if present) and the distance. In single stars, the absolute magnitude is used to compute the pseudo-size. See the 'star rendering' section for more information.",
        "unit": "Double",
        "aliases": [
          "absmag",
          "absoluteMagnitude"
        ]
      }
    },
    "ProperMotion": {
      "description": "Defines proper motion attributes.",
      "muAlpha": {
        "description": "Proper motion in right ascension, the :math:`\\mu_{\\alpha\\star}`, in mas/yr.",
        "unit": "Double",
        "aliases": [
          "muAlphaMasYr"
        ]
      },
      "muDelta": {
        "description": "Proper motion in declination, the :math:`\\mu_{\\delta}`, in mas/yr.",
        "unit": "Double",
        "aliases": [
          "muDeltaMasYr"
        ]
      },
      "radialVelocity": {
        "description": "The radial velocity, in km/s.",
        "unit": "Double",
        "aliases": [
          "rv",
          "rvKms",
          "radialVelocityKms"
        ]
      },
      "epochJd": {
        "description": "The epoch as a Julian date. For instance, 2015.5 corresponds to a Julian date of 2457206.125.",
        "unit": "Double"
      },
      "epochYear": {
        "description": "The epoch as a year plus fraction (e.g. 2015.5). This gets converted to a Julian date internally.",
        "unit": "Double"
      }
    },
    "SolidAngle": {
      "description": "Defines solid angle thresholds for the various rendering modes.",
      "thresholdNone": {
        "description": "Solid angle threshold to start rendering this object at all. Mainly for internal use. Gets overwritten during initialization.",
        "unit": "Double"
      },
      "thresholdPoint": {
        "description": "Solid angle threshold boundary between rendering the object as a point and as a quad. Mainly for internal use. Gets overwritten during initialization.",
        "unit": "Double"
      },
      "thresholdQuad": {
        "description": "Solid angle threshold boundary between rendering the object as a quad and as a model. Mainly for internal use. Gets overwritten during initialization.",
        "unit": "Double"
      }
    },
    "Shape": {
      "description": "Defines attributes related to shape objects",
      "track": {
        "description": "Shape objects can use the position of other objects as their own. This is useful when, for example, we want to add a wireframe sphere around an object. This attribute contains the name of the object whose position we are to track.",
        "unit": "String",
        "aliases": [
          "trackName"
        ]
      }
    },
    "Trajectory": {
      "description": "Defines attributes related to orbits and trajectory objects. See :ref:`orbits` for more information.",
      "orbitProvider": {
        "description": "In *Orbit* archetype objects, this is the fully-qualified Java class that provides orbit data. This class needs to implement ``IOrbitDataProvider``. |brsp| **Values:** |br| ``gaiasky.data.orbit.OrbitalParametersProvider`` -- orbit is defined with orbital elements. |br| ``gaiasky.data.orbit.OrbitFileDataProvider`` -- orbit defined from a file of 3D sample points, in Km. |brsp| See :ref:`orbits` for more information.",
        "unit": "String",
        "aliases": [
          "provider"
        ]
      },
      "orbit": {
        "description": "The orbit component, containing some additional information, like the orbital elements, the period, etc. See :ref:`orbits` for a full description of the format and possible values of this attribute.",
        "unit": "Map"
      },
      "orientationModel": {
        "description": "The orientation model of this orbit. |brsp| **Values:** |br| ``default`` -- the default orientation. |br| ``extrasolar_system`` -- orientation for extrasolar systems. See :ref:`orbits` for more information.",
        "unit": "String",
        "aliases": [
          "model:Orbit"
        ]
      },
      "onlyBody": {
        "description": "In object-less orbits (orbits not attached to any object), it may be interesting to not render the orbit itself as a line, but only a point at the head of that orbit in the current time. If this attribute is set to true, the orbit is rendered as a single point at the head. Useful essentially to render many particles using orbital elements. **This attribute is deprecated, use bodyRepresentation instead**.",
        "unit": "Boolean",
        "aliases": [
          "onlybody"
        ]
      },
      "bodyRepresentation": {
        "description": "The body representation type for this orbit/trajectory. This only works with orbits defined via orbital elements. |brsp| **Values:** |br| ``only_orbit`` -- the body is not visually represented at all. |br| ``only_body`` -- only the body is visually represented, no line. |br| ``body_and_orbit`` -- both body and orbit line are represented.",
        "unit": "String"
      },
      "bodyColor": {
        "description": "Body color. Color to use to represent the body in orbital elements trajectories, when the ``bodyRepresentation`` attribute enables the representation of the body for this trajectory.",
        "unit": "Double[4]",
        "aliases": [
          "pointColor",
          "pointcolor"
        ]
      },
      "pointSize": {
        "description": "The size of the point at the head of the trajectory in object-less orbits (orbits that are not attached to any object). Examples of this are asteroids, where orbits are defined via the orbital elements, and not all orbits are attached to an asteroid object for performance purposes. In these cases, the size of the point at the head of the orbit is set in this property.",
        "unit": "Double",
        "aliases": [
          "pointsize"
        ]
      },
      "closedLoop": {
        "description": "Define whether the loop must be closed or not (i.e. join the end point with the start point). Defaults to true, which is the value for periodic orbits.",
        "unit": "Boolean"
      },
      "orbitTrail": {
        "description": "Whether to fade the orbit as it gets further away from the head (or object), in the opposite direction of travel. By default, the head is mapped to an opacity of 1, and the tail is mapped to an opacity of 0.",
        "unit": "Boolean",
        "aliases": [
          "orbittrail",
          "trail"
        ]
      },
      "trailMap": {
        "description": "Modify the tail mapping value in case ``orbitTrail`` is set to ``true``. This mapping parameter defines the location in the orbit (in [0,1]) where we map the opacity value of 0. The default value is 0. Set it to 0.5 to have a trail from the object to half the orbit. This enables having shorter trails, while improving the performance due to less lines being rendered.",
        "unit": "Double"
      },
      "trailMinOpacity": {
        "description": "Minimum opacity level of the whole orbit in trail mode. Only active if ``orbitTrail`` is set to ``true``. This parameter defines the minimum opacity of the orbit (in [0,1]). This enables having trails where the faint end maps to an opacity larger than zero, thus getting to see the whole orbit at all times.",
        "unit": "Double"
      },
      "newMethod": {
        "description": "Internal parameter. Changes the way in which transformations are applied to the orbit objects. Asteroids have this set to true.",
        "unit": "Boolean",
        "aliases": [
          "newmethod"
        ]
      },
      "numSamples": {
        "description": "Override the number of samples to be used for this orbit. Gaia Sky computes the number of samples internally, but in some cases it may be necessary to override it to give orbits more detail.",
        "unit": "Integer"
      },
      "orbitScaleFactor": {
        "description": "Multiplicative factor to scale the orbit data points when they are being loaded.",
        "unit": "Double",
        "aliases": [
          "multiplier"
        ]
      },
      "fadeDistanceUp": {
        "description": "Override the distance at which the orbit becomes totally invisible. In internal units. If not overridden, this is computed internally from the radius of the attached body.",
        "unit": "Double"
      },
      "fadeDistanceDown": {
        "description": "Override the distance at which the orbit starts to fade out. In internal units. If not overridden, this is computed internally from the radius of the attached body.",
        "unit": "Double"
      },
      "refreshRate": {
        "description": "For orbits that need to be refreshed (i.e. not implemented as orbital elements, but via samples), this is the orbit refresh rate, in [0,1]. Set to 0 to recompute only every period, and set to 1 to recompute as often as possible. Set to negative to use the default re-computation heuristic. This can help reduce the visible seams that occur in the transitions from the trajectory lines computed in the period to the current period in orbits which are very open.",
        "unit": "Double"
      }
    },
    "ModelScaffolding": {
      "description": "Defines attributes related objects with 3D models.",
      "referencePlane": {
        "description": "The reference plane to use for this model object. |brsp| **Values:** |br| ``ecliptic`` |br| ``galactic`` |br| ``equatorial``",
        "unit": "String",
        "aliases": [
          "refPlane",
          "refplane"
        ]
      },
      "randomize": {
        "description": "A list with the components of this model that need to be randomized via procedural generation. Can contain 'model', 'atmosphere', and/or 'cloud'.",
        "unit": "String[]"
      },
      "seed": {
        "description": "In case the 'randomize' attribute is defined, this attribute defines the RNG seed to use.",
        "unit": "Double"
      },
      "sizeScaleFactor": {
        "description": "Scale factor to apply to the 3D model of this object. Mainly used internally. Using the model or object attributes directly to specify the size is recommended.",
        "unit": "Double",
        "aliases": [
          "sizescalefactor"
        ]
      },
      "locVaMultiplier": {
        "description": "Solid angle multiplier for children location objects (Loc) of this object. If set, this scales the solid angle of the object for children locations.",
        "unit": "Double",
        "aliases": [
          "locvamultiplier"
        ]
      },
      "locThresholdLabel": {
        "description": "Threshold label value for children locations. Mainly used internally, should not be touched externally.",
        "unit": "Double",
        "aliases": [
          "locThOverFactor",
          "locthoverfactor"
        ]
      },
      "selfShadow": {
        "description": "Whether to render self-shadows for this object.",
        "unit": "Boolean"
      },
      "shadowValues": {
        "description": "Deprecated as of Gaia Sky 3.6.1.",
        "unit": "Double[3]",
        "aliases": [
          "shadowvalues"
        ]
      }
    },
    "Model": {
      "description": "Defines the actual model of objects with 3D models. See :ref:`model` for more information.",
      "model": {
        "description": "Model definition for this object. See the :ref:`model` documentation for more information.",
        "unit": "Map"
      }
    },
    "Volume": {
      "description": "Defines a volume to be rendered inside a model, typically a bounding box.",
      "vertexShader": {
        "description": "The vertex shader to use. Prefix with `$data` to use a shader in a dataset. Defaults to the PBR vertex shader.",
        "unit": "String"
      },
      "fragmentShader": {
        "description": "The fragment shader to use. Prefix with `$data` to use a shader in a dataset.",
        "unit": "String"
      }
    },
    "Atmosphere": {
      "description": "Defines the atmosphere of a planet or moon. See the :ref:`atmospheric-scattering` documentation for more information.",
      "atmosphere": {
        "description": "Atmosphere definition for this object. See the :ref:`atmospheric-scattering` documentation for more information.",
        "unit": "Map"
      }
    },
    "Cloud": {
      "description": "Defines the cloud layer of a planet or moon. See the :ref:`clouds` documentation for more information.",
      "cloud": {
        "description": "Cloud layer definition for this object. See the :ref:`clouds` documentation for more information.",
        "unit": "Map"
      }
    },
    "RenderFlags": {
      "description": "Defines rendering flags.",
      "renderQuad": {
        "description": "Whether to render this entity as a billboard (quad).",
        "unit": "Boolean",
        "aliases": [
          "renderquad"
        ]
      }
    },
    "MotorEngine": {
      "description": "Defines machines for the spacecraft mode.",
      "machines": {
        "description": "Provides machine definitions for the spacecraft mode. Check out the spacecraft object definition in the default data pack for more information.",
        "unit": "Map"
      }
    },
    "RefSysTransform": {
      "description": "Defines an arbitrary reference system transformation via a 4x4 matrix. See :ref:`ref-sys-transform` for more information.",
      "transformFunction": {
        "description": "Defines a transformation matrix to apply to the position of the object. The name of the transformation to apply. |brsp| **Values:** |br| ``equatorialToEcliptic`` |br| ``eclipticToEquatorial`` |br| ``equatorialToGalactic`` |br| ``galacticToEquatorial`` |br| ``eclipticToGalactic`` |br| ``galacticToEcliptic`` |brsp| See :ref:`ref-sys-transform` for more information.",
        "unit": "String",
        "aliases": [
          "transformName"
        ]
      },
      "transformMatrix": {
        "description": "The 16 values of the 4x4 transformation matrix, in column-major order. See :ref:`ref-sys-transform` for more information.",
        "unit": "Double[16]",
        "aliases": [
          "transformValues"
        ]
      }
    },
    "AffineTransformations": {
      "description": "Defines arbitrary affine transformations, applied in the order they are defined. See :ref:`affine-transformations` for more information.",
      "matrix:GenericCatalog": {
        "description": "A generic 4x4 matrix transform that will be applied to the sequence of affine transformations. The matrix values need to be in column-major order. See :ref:`affine-transformations` for more information.",
        "unit": "Double[16]",
        "aliases": [
          "transformMatrix:GenericCatalog"
        ]
      },
      "translate": {
        "description": "A translation vector, in internal units (see aliases for other units). See :ref:`affine-transformations` for more information.",
        "unit": "Double[3]",
        "aliases": [
          "translatePc",
          "translateKm"
        ]
      },
      "rotate": {
        "description": "A rotation axis and angle, in degrees. The vector is expected as [X, Y, Z, angle]. See :ref:`affine-transformations` for more information.",
        "unit": "Double[4]"
      },
      "scale": {
        "description": "A scale transformation. Can be a 3-vector or a single value. See :ref:`affine-transformations` for more information.",
        "unit": "Double[3] | Double"
      },
      "transformations": {
        "description": "Describe the transformations directly in a map, with 'impl', and whatever attributes. The usage of the attributes 'translate', 'scale' and 'rotate' is strongly recommended over this.",
        "unit": "Map"
      }
    },
    "Fade": {
      "description": "Defines the properties that control the fading in and out of the object.",
      "fadeIn": {
        "description": "The starting and ending fade-in distances, in parsecs, from the reference system origin (unless 'fadeObjectName' or 'fadePosition' are defined, in which case the distances are relative to the given object or position), where the object starts and ends its fade-in transition. ",
        "unit": "Double[2]",
        "aliases": [
          "fadein"
        ]
      },
      "fadeInMap": {
        "description": "The alpha/opacity values to which the fade-in starting and ending distances are mapped. They default to [0,1].",
        "unit": "Double[2]"
      },
      "fadeOut": {
        "description": "The starting and ending fade-out distances, in parsecs, from the reference system origin (unless 'fadeObjectName' or 'fadePosition' are defined, in which case the distances are relative to the given object or position), where the object starts and ends its fade-out transition. ",
        "unit": "Double[2]",
        "aliases": [
          "fadeout"
        ]
      },
      "fadeOutMap": {
        "description": "The alpha/opacity values to which the fade-out starting and ending distances are mapped. They default to [1,0].",
        "unit": "Double[2]"
      },
      "fadeObjectName": {
        "description": "The name of the object to be used to compute the current distance for the fade in and out operations.",
        "unit": "String",
        "aliases": [
          "positionobjectname"
        ]
      },
      "fadePosition": {
        "description": "The position, in the internal reference system and internal units, to be used to compute the current distance for the fade in and out operations.",
        "unit": "Double[3]"
      }
    },
    "DatasetDescription": {
      "description": "Contains metadata about the dataset represented by this object. All objects with this component get an entry in the datasets list.",
      "catalogInfo": {
        "description": "A map containing the metadata for the catalog represented by this object. The map can contain the attributes 'name', 'description', 'type' (INTERNAL|SCRIPT|LOD|SAMP|UI), 'nParticles', 'sizebytes'. See :ref:`catalog-formats` for more information.",
        "unit": "Map",
        "aliases": [
          "datasetInfo",
          "cataloginfo"
        ]
      },
      "addDataset": {
        "description": "Whether to add the dataset to the dataset manager or not. Typically used with star and particle sets that already belong to a higher-level dataset.",
        "unit": "Boolean",
        "aliases": [
          "addToDatasetManager"
        ]
      },
      "description:MeshObject": null
    },
    "Label": {
      "description": "Defines attributes that control how labels are processed and rendered. See :ref:`labels` for more information.",
      "label": {
        "description": "A boolean to disable or enable label rendering for this object.",
        "unit": "Boolean"
      },
      "label2d": {
        "description": "Unused, here for backwards compatibility.",
        "unit": "Boolean"
      },
      "labelPosition": {
        "description": "Override the position at which to render this label, in the internal reference system and internal units (see aliases for more unit options). If this is not given, the position of the object is used.",
        "unit": "Double[3]",
        "aliases": [
          "labelposition",
          "labelPositionPc",
          "labelPositionKm"
        ]
      },
      "renderLabel": {
        "description": "Defaults to true, this flag enables or disables the actual rendering of the label in the attached object.",
        "unit": "Boolean"
      },
      "forceLabel": {
        "description": "Force-display the label of this object, regardless of its solid angle. If 'true', the label for this object is always displayed.",
        "unit": "Boolean"
      },
      "labelFactor": {
        "description": "Factor to apply to the size of the label for this object.",
        "unit": "Double"
      },
      "labelBias": {
        "description": "Bias to compute the label visibility. >1 to increase visibility.",
        "unit": "Double"
      },
      "labelMax": {
        "description": "Internal rendering factor, should not be set externally.",
        "unit": "Double"
      },
      "textScale": {
        "description": "Internal rendering factor, should not be set externally.",
        "unit": "Double"
      }
    },
    "RenderType": {
      "description": "Defines attributes that control rendering operations for this object.",
      "renderGroup": {
        "description": "This is an internal property used to fine-tune exactly the environment and shader to use to render the object. See `RenderGroup.java <https://codeberg.org/gaiasky/gaiasky/src/branch/master/core/src/gaiasky/render/RenderGroup.java>`__ for more information.",
        "unit": "String",
        "aliases": [
          "rendergroup"
        ]
      },
      "billboardRenderGroup:Particle": null
    },
    "BillboardSet": {
      "description": "Defines attributes related to billboard set objects.",
      "data:BillboardGroup": {
        "description": "A list of ``BillboardDataset`` objects. Mainly used for the Milky Way model. Each object contains 'impl', 'file', 'type', 'size', 'intensity', 'layers', and 'maxsizes'. See the Milky Way object in the ``universe.json`` file in the default data pack for an example.",
        "unit": "BillboardDataset[]"
      }
    },
    "Title": {
      "description": "Defines attributes related to two-dimensional titles.",
      "scale:Text2D": {
        "description": "Scale factor to scale up or down the title.",
        "unit": "Double"
      },
      "lines:Text2D": {
        "description": "Whether to render frame lines above and below the title or not.",
        "unit": "Boolean"
      },
      "align:Text2D": {
        "description": "The horizontal alignment of the title. Center (1), left (8) or right (16).",
        "unit": "Integer"
      }
    },
    "Axis": {
      "description": "Defines attributes related to reference system axes.",
      "axesColors": {
        "description": "A 3x3 matrix with the color for each of the axes in the reference system.",
        "unit": "Double[3][3]"
      }
    },
    "LocationMark": {
      "description": "Defines attributes related to location objects. Location objects usually mark special points on the surface of objects, like cities, craters, etc. They have a label (text) and an optoinal marker. The label color is defined in the attribute 'labelColor', and the marker color is defined in the attribute 'color'. See :ref:`locations` for more information.",
      "location": {
        "description": "A 2-dimensional position [longitude, latitude] on the surface of the parent, in degrees.",
        "unit": "Double[2]"
      },
      "tooltipText": {
        "description": "Descriptive text to display as a tooltip when the mouse hovers over the location mark. Only locations with markers display tooltips.",
        "unit": "String"
      },
      "link": {
        "description": "A link (URL) to an external resource, preferrably Wikipedia, with more information about this location.",
        "unit": "String"
      },
      "locationType": {
        "description": "Additional categorization of locations. This is used only in the UI so that all locations in the same category can be turned on and off at the same time with a single click.",
        "unit": "String"
      },
      "ignoreSolidAngleLimit": {
        "description": "Ignore the solid angle upper limit when determining the visibility of this location. Setting this to true causes the location to not disappear, regardless of the camera distance.",
        "unit": "Boolean"
      },
      "locationMarkerTexture": {
        "description": "Location marker texture (image). Set to 'none' to disable maker. Possible values are 'none', 'default', 'flag', 'city', or a path to a PNG image. If the path directs to a data package, the format is '$data/[package-name]/path/to/file.png'.",
        "unit": "String",
        "aliases": [
          "markerTexture"
        ]
      },
      "distFactor": {
        "description": "Factor to apply to the radius of the parent object to get distance from the center of the object, in case of non-spherical parent objects. This modulates the distance of the location from the center of the object (radius), as the locations are given in [longitude, latitude, radius]. If this is not specified, the radius is that of the parent object. If you want the location to show at double the radius distance, use 2.0.",
        "unit": "Double"
      }
    },
    "Constel": {
      "description": "Defines attributes related to constellation objects.",
      "ids": {
        "description": "Contains a list of segments (a list of lists of points) with the HIP identifiers for each of the stars of this constellation.",
        "unit": "Integer[][]"
      }
    },
    "Boundaries": {
      "description": "Defines attributes related to constellation boundary objects.",
      "boundaries": {
        "description": "Contains a list of lists of sky coordinates :math:`(\\alpha, \\delta)`, in degrees, defining the lines of the constellation boundaries.",
        "unit": "Double[][][2]",
        "aliases": [
          "boundariesEquatorial"
        ]
      }
    },
    "ParticleSet": {
      "description": "Defines attributes related to particle set objects, which contain a point cloud.",
      "provider:ParticleGroup": {
        "description": "The class to be used to load the data. This class must implement ``IParticleGroupDataProvider``. This should have the fully-qualified class name. For instance, ``gaiasky.data.group.STILDataProvider``.",
        "unit": "String"
      },
      "providerParams": {
        "description": "Parameters to be passed into the provider class.",
        "unit": "Map",
        "aliases": [
          "providerparams"
        ]
      },
      "meanPosition": {
        "description": "The mean position of this particle set, in the internal reference system and internal units (see aliases for more units). If not given, this is computed automatically from the particle positions.",
        "unit": "Double[3]",
        "aliases": [
          "meanPositionKm",
          "meanPositionPc",
          "pos:ParticleGroup",
          "posKm:ParticleGroup",
          "posPc:ParticleGroup",
          "position:ParticleGroup"
        ]
      },
      "dataFile": {
        "description": "The path to the data file with the particles to be loaded by the provider.",
        "unit": "String",
        "aliases": [
          "datafile"
        ]
      },
      "factor": {
        "description": "A multiplicative factor to apply to the positions of all particles during loading.",
        "unit": "Double"
      },
      "numLabels": {
        "description": "Number of labels to render for this particle group. Defaults to the configuration setting.",
        "unit": "Integer"
      },
      "profileDecay": {
        "description": "The profile decay of the particles in the shader. Controls how sudden is the color and intensity falloff from the center.",
        "unit": "Double",
        "aliases": [
          "profiledecay"
        ]
      },
      "colorNoise": {
        "description": "Noise factor for the color, in [0,1]. This randomly generates colors from the main color. The larger the color noise, the more different the generated colors from the main color.",
        "unit": "Double",
        "aliases": [
          "colornoise"
        ]
      },
      "particleSizeLimits": {
        "description": "Minimum and maximum solid angle limits of the particles in radians. They are used as :math:`(dist * tan(\\alpha_{min}), dist * tan(\\alpha_{max}))`. The minimum and maximum values must be in [0,1.57].",
        "unit": "Double[2]",
        "aliases": [
          "particlesizelimits",
          "particleSizeLimitsDeg"
        ]
      },
      "colorMin": {
        "description": "The color of the particles at the closest distance, as RGBA. If this is set, the color of the particles gets interpolated from ``colorMin`` to ``colorMax`` depending on the distance of the particles to the origin.",
        "unit": "Double[4]"
      },
      "colorMax": {
        "description": "The color of the particles at the maximum distance, as RGBA. If this is set, the color of the particles gets interpolated from ``colorMin`` to ``colorMax`` depending on the distance of the particles to the origin.",
        "unit": "Double[4]"
      },
      "colorFromTexture": {
        "description": "If true, color of this particle depends on the texture assigned to it. This is useful when using 'textureAttribute', for instance, where the texture is assigned depending on the value of an attribute for this object. This feature requires a non-zero 'colorNoise', as it is used to generate the colors.",
        "unit": "Boolean"
      },
      "fixedAngularSize": {
        "description": "Set a fixed angular size for all particles in this set, as a solid angle in radians (see aliases for other units).",
        "unit": "Double",
        "aliases": [
          "fixedAngularSizeDeg",
          "fixedAngularSizeRad"
        ]
      },
      "renderSetLabel": {
        "description": "Enable or disable the global label of this particle set. If true, the name of this particle set is rendered at the given label position.",
        "unit": "Boolean"
      },
      "renderParticles": {
        "description": "Disable particle rendering by setting this to false. Labels, in case of star sets, will still be rendered.",
        "unit": "Boolean"
      },
      "texture": {
        "description": "Texture file to render the particles of this group. This can also point to a directory, in which case all the image files within are used (they must have the same dimensions). If this is provided, ``profileDecay`` is ignored.",
        "unit": "String"
      },
      "textures": {
        "description": "List of texture files to render the particles of this group. If more than one texture is provided, each particle is assigned a texture randomly. This can also point to one or more directories, in which case all the image files within are used. All images must have the same dimensions. If this is provided, ``profileDecay`` is ignored.",
        "unit": "String[]"
      },
      "textureAttribute": {
        "description": "If present, this attribute is used to assign textures to particles. It should be an integer attribute in [1,n], where n is the number of textures. If the value of the attribute is out of this range, it is clamped. The attribute value is used as an index to query the texture array, where the textures are sorted using the natural order of their file names. If the attribute is of any other type, Gaia Sky will do its best to use it to assign textures as well, but no guarantees.",
        "unit": "String"
      },
      "modelFile": {
        "description": "Path to the model file to use (``obj``, ``obj.gz`` ``g3db``, ``g3dj``, ``gltf``, ``glb``). If present, the ``modelType`` and ``modelParams`` attributes are ignored. The model should have only positions (vector-3), normals (vector-3), and texture coordinates (vector-2) as vertex attributes. Only the first mesh of the model is used. Textures, lighting and material are ignored. This is only used in extended particle groups.",
        "unit": "String"
      },
      "modelType": {
        "description": "The model type to use for this particle set. |brsp| **Values:** |br| ``quad`` -- render billboards. |br| ``sphere`` render UV spheres. |br| ``icosphere`` render icosahedron-based spheres. |brsp| Defaults to 'quad'. This is only used in extended particle groups. To enable extended particle groups, you need to set 'type' to 'PARTICLES_EXT' in the 'providerParams' map.",
        "unit": "String"
      },
      "modelParams": {
        "description": "Model parameters in a map. Usually, the 'diameter', 'width', 'height', 'recursion' or 'quality' go here. For more info, see the  ``gaiasky.util.ModeCache`` class. This is only used in extended particle groups.",
        "unit": "Map<String,Object>"
      },
      "modelPrimitive": {
        "description": "The GL primitive to use. |brsp| **Values:** |br| ``GL_TRIANGLES`` |br| ``GL_TRIANGLE_STRIP`` |br| ``GL_TRIANGLE_FAN`` |br| ``GL_LINES`` |br| ``GL_LINE_STRIP`` |br| ``GL_LINE_LOOP`` |brsp| Defaults to ``GL_TRIANGLES``. The ``GL_LINE`` primitives enable wireframe rendering, which is currently only supported by sphere and ico-sphere model types. This is only used in extended particle groups.",
        "unit": "String"
      },
      "proximityDescriptorsLocation": {
        "description": "Location of directory that contains descriptor JSON files that bear the names of objects in the dataset. These get loaded whenever the camera gets close to a particle.",
        "unit": "String",
        "aliases": [
          "proximityDescriptors",
          "descriptorsLocation"
        ]
      },
      "proximityThreshold": {
        "description": "Solid angle above which the proximity descriptor loading is triggered.",
        "unit": "Double",
        "aliases": [
          "proximityThresholdDeg",
          "proximityThresholdRad"
        ]
      }
    },
    "StarSet": {
      "description": "Defines attributes related to star set objects, which contain a star catalog or group.",
      "provider:StarGroup": {
        "description": "The class to be used to load the data. This class must implement ``IParticleGroupDataProvider``. This should have the fully-qualified class name. For instance, ``gaiasky.data.group.STILDataProvider``.",
        "unit": "String"
      },
      "providerParams:StarGroup": {
        "description": "Parameters to be passed into the provider class.",
        "unit": "Map",
        "aliases": [
          "providerparams:StarGroup"
        ]
      },
      "meanPosition:StarGroup": {
        "description": "The mean position of this particle set, in the internal reference system and internal units (see aliases for more units). If not given, this is computed automatically from the particle positions.",
        "unit": "Double[3]",
        "aliases": [
          "meanPositionKm:StarGroup",
          "meanPositionPc:StarGroup",
          "pos:StarGroup",
          "posKm:StarGroup",
          "posPc:StarGroup",
          "position:StarGroup"
        ]
      },
      "dataFile:StarGroup": {
        "description": "The path to the data file with the particles to be loaded by the provider.",
        "unit": "String",
        "aliases": [
          "datafile:StarGroup"
        ]
      },
      "factor:StarGroup": {
        "description": "A multiplicative factor to apply to the positions of all particles during loading.",
        "unit": "Double"
      },
      "profileDecay:StarGroup": {
        "description": "The profile decay of the particles in the shader. Controls how sudden is the color and intensity falloff from the center.",
        "unit": "Double",
        "aliases": [
          "profiledecay:StarGroup"
        ]
      },
      "colorNoise:StarGroup": {
        "description": "Noise factor for the color, in [0,1]. This randomly generates colors from the main color. The larger the color noise, the more different the generated colors from the main color.",
        "unit": "Double",
        "aliases": [
          "colornoise:StarGroup"
        ]
      },
      "particleSizeLimits:StarGroup": {
        "description": "Minimum and maximum solid angle limits of the particles in radians. They are used as :math:`(dist * tan(\\alpha_{min}), dist * tan(\\alpha_{max}))`. The minimum and maximum values must be in [0,1.57].",
        "unit": "Double[2]",
        "aliases": [
          "particlesizelimits:StarGroup",
          "particleSizeLimitsDeg:StarGroup"
        ]
      },
      "colorMin:StarGroup": {
        "description": "The color of the particles at the closest distance, as RGBA. If this is set, the color of the particles gets interpolated from ``colorMin`` to ``colorMax`` depending on the distance of the particles to the origin.",
        "unit": "Double[4]"
      },
      "colorMax:StarGroup": {
        "description": "The color of the particles at the maximum distance, as RGBA. If this is set, the color of the particles gets interpolated from ``colorMin`` to ``colorMax`` depending on the distance of the particles to the origin.",
        "unit": "Double[4]"
      },
      "fixedAngularSize:StarGroup": {
        "description": "Set a fixed angular size for all particles in this set, as a solid angle in radians (see aliases for other units).",
        "unit": "Double",
        "aliases": [
          "fixedAngularSizeDeg:StarGroup",
          "fixedAngularSizeRad:StarGroup"
        ]
      },
      "renderParticles:StarGroup": {
        "description": "Disable particle rendering by setting this to false. Labels, in case of star sets, will still be rendered.",
        "unit": "Boolean"
      },
      "epochJd:StarGroup": {
        "description": "The epoch for the positions of this star group as a Julian date.",
        "unit": "Double",
        "aliases": [
          "epoch:StarGroup"
        ]
      },
      "variabilityEpochJd:StarGroup": {
        "description": "The light curve epoch for the variable stars in this star group as a Julian date.",
        "unit": "Double",
        "aliases": [
          "variabilityEpoch:StarGroup"
        ]
      },
      "numLabels:StarGroup": {
        "description": "Number of labels to render for this star group. Defaults to the configuration setting.",
        "unit": "Integer"
      }
    },
    "ParticleExtra": {
      "description": "Defines attributes related to single particles and single star objects.",
      "primitiveRenderScale": {
        "description": "Artificial scale factor for the size of this particle during rendering.",
        "unit": "Double"
      },
      "tEff": {
        "description": "Effective temperature of the star or body, in Kelvin.",
        "unit": "Double",
        "aliases": [
          "teff"
        ]
      }
    },
    "Mesh": {
      "description": "Defines attributes related to meshes and iso-density surfaces. See :ref:`mesh-objects` for more information.",
      "shading": {
        "description": "Shading mode for the mesh. |brsp| **Values:** |br| ``additive`` -- additive blending. |br| ``dust`` -- opaque mesh with dither transparency at the edges. |br| ``regular`` -- regular general-purpose PBR shader.",
        "unit": "String"
      },
      "additiveBlending": {
        "description": "Sets the shading mode to 'additive'.",
        "unit": "Boolean",
        "aliases": [
          "additiveblending"
        ]
      }
    },
    "Focus": {
      "description": "Defines attributes related to objects that can be focussed.",
      "focusable": {
        "description": "Defines whether the object is focusable or not. Non-focusable objects do not appear in the search results and can't be selected with the mouse. By default, this is true.",
        "unit": "Boolean"
      }
    },
    "Raymarching": {
      "description": "Defines attributes related to ray-marched objects.",
      "shader": {
        "description": "Path to the fragment shader GLSL file to use to render this object. The fragment shader is processed for each pixel in the image, and must produce a ray-marched representation of the object. The file must have one of the following extensions: ``.glsl``, ``.frag``, ``.fragment``, ``.glslf``, ``.fsh``. The fragment shader file is typically distributed with the dataset, and has the form ``$data/[dataset-name]/path/to/file.glsl``.",
        "unit": "String",
        "aliases": [
          "raymarchingShader"
        ]
      },
      "additionalTexture": {
        "description": "Texture file to pass to the raymarching shader as additional texture. This is usually a noise texture, but can be anything, really.",
        "unit": "String",
        "aliases": [
          "raymarchingTexture"
        ]
      }
    },
    "Highlight": {
      "description": "Defines attributes that apply to the visual representation of particle and star sets.",
      "pointScaling": {
        "description": "Scale factor taht applies to the the visual representation for each object of this dataset.",
        "unit": "Double"
      }
    }
  }
}
